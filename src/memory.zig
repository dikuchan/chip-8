const std = @import("std");

const logger = std.log.scoped(.memory);

const MEMORY_SIZE = 0x1000;

pub const PROGRAM_OFFSET = 0x200;
pub const FONT_OFFSET = 0x50;

const FONT_DATA = [_]u8{
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
};

pub const Memory = [MEMORY_SIZE]u8;

pub fn init() Memory {
    var memory: Memory = [_]u8{0} ** MEMORY_SIZE;
    for (FONT_DATA, FONT_OFFSET..) |chr, i| {
        memory[i] = chr;
    }
    return memory;
}

pub fn load_file(file_path: []const u8) !Memory {
    var memory = init();

    var file = try std.fs.cwd().openFile(file_path, .{});
    defer file.close();
    const size = try file.readAll(memory[PROGRAM_OFFSET..]);
    logger.debug("loaded ROM file: {d} bytes", .{size});

    return memory;
}
